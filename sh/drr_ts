#!/bin/bash
if [ $# -lt 11 ]; then
  echo "Use: drr_ts hydrocode varkey disaggregate_varkey resample_varkey raster_sql_file raster_sum_file db_host db_name bundle ftype tz_offset [start_epoch] [end_epoch]"
  exit
fi

hydrocode=$1
varkey=$2
disaggregate_varkey=$3
resample_varkey=$4
raster_sql_file=$5
raster_sum_file=$6
db_host=$7
db_name=$8
bundle=${9}
ftype=${10}
tz_offset=0
start_epoch=-1
end_epoch=-1
if [ $# -gt 10 ]; then
  tz_offset=${11}
fi
if [ $# -gt 11 ]; then
  start_epoch=${12}
fi
if [ $# -gt 12 ]; then
  end_epoch=${13}
fi
echo "called $drr_ts $hydrocode $varkey $disaggregate_varkey $resample_varkey $raster_sql_file $raster_sum_file $db_host $db_name $bundle $ftype $tz_offset $start_epoch $end_epoch"
echo "Checking bundle as ${bundle} and type as ${ftype}"
raster_sql="
\\set band '1' \n
\\set hydrocode '$hydrocode' \n
\\set varkey '$varkey' \n
\\set disag_varkey '$disaggregate_varkey' \n
\\set resample_varkey '$resample_varkey' \n
\\set bundle '${bundle}' \n
\\set ftype '${ftype}' \n
\\set tz_offset $tz_offset \n 
\\set start_epoch $start_epoch \n 
\\set end_epoch $end_epoch \n
\\set end_wdm $end_wdm \n
\\set fname '${raster_sum_file}' \n
select hydroid as covid from dh_feature where hydrocode = 'cbp6_met_coverage' \\gset \n
	
\\\timing ON \n
	
copy (
 WITH usgs_features AS ( \n
   SELECT * \n
   FROM dh_feature_fielded \n
   WHERE hydrocode = :'hydrocode' \n
   AND bundle = :'bundle' \n
   AND ftype = :'ftype' \n
 ) \n
 ,metUnion AS ( \n
   SELECT met.featureid, \n
   met.tstime, met.tsendtime, \n
   st_clip( \n
     st_union(met.rast), \n
     st_buffer(st_convexhull(f.dh_geofield_geom),0.125) \n
   ) as rast \n
   FROM usgs_features as f \n
   JOIN( \n
     SELECT * \n
     FROM dh_variabledefinition as b \n
     LEFT JOIN dh_timeseries_weather as met \n
     ON (met.varid = b.hydroid) \n
     WHERE b.varkey=:'varkey' \n
       AND ( (met.tsendtime >= :start_epoch) OR (:start_epoch = -1) ) \n
       AND ( (met.tsendtime <= :end_epoch) OR (:end_epoch = -1) ) \n
       AND met.featureid = :covid \n
   ) AS met \n
   ON f.dh_geofield_geom && met.bbox \n
   GROUP BY met.featureid, met.tsendtime, met.tstime, f.dh_geofield_geom \n
 ) \n
 ,metDisagg AS ( \n
   SELECT fracmet.featureid, \n
   fracmet.tstime, fracmet.tsendtime, \n
   st_clip( \n
     st_union(fracmet.rast), \n
     st_buffer(st_convexhull(f.dh_geofield_geom),0.125) \n
   ) as rast \n
   FROM usgs_features as f \n
   LEFT OUTER JOIN( \n
     SELECT * \n
     FROM dh_variabledefinition as b \n
     LEFT JOIN dh_timeseries_weather as fracmet \n
       ON (fracmet.varid = b.hydroid) \n
       WHERE b.varkey=:'disag_varkey' \n
       AND ( (fracmet.tsendtime >= :start_epoch) OR (:start_epoch = -1) ) \n
       AND ( (fracmet.tsendtime <= :end_epoch) OR (:end_epoch = -1) ) \n
       AND fracmet.featureid = :covid \n
   ) AS fracmet \n
   ON f.dh_geofield_geom && fracmet.bbox \n
   GROUP BY fracmet.featureid, fracmet.tsendtime, fracmet.tstime, f.dh_geofield_geom \n
 ) ,tempDisagg as ( \n
   SELECT met.featureid, \n
     frac.tstime, frac.tsendtime, \n
     CASE \n
       WHEN frac.rast IS NULL AND rt.rast IS NULL THEN \n
        st_clip( met.rast, ST_ConvexHull(f.dh_geofield_geom) ) \n
       WHEN frac.rast IS NULL THEN \n
         st_clip( st_resample(met.rast,rt.rast), ST_ConvexHull(f.dh_geofield_geom) ) \n
       ELSE ST_MapAlgebra( \n
         st_clip(  \n
           st_resample(met.rast,rt.rast),  \n
           ST_ConvexHull(f.dh_geofield_geom) ), 1, \n
         st_clip( \n
           st_resample(frac.rast,rt.rast), \n
           ST_ConvexHull(f.dh_geofield_geom) \n
         ), 1, \n
         '[rast1] * [rast2]' \n
       )  \n
     END as rast \n
   FROM usgs_features as f \n
   LEFT JOIN metUnion as met \n
   ON (  \n
     1 = 1 ) \n
   LEFT JOIN dh_variabledefinition as vf \n
   ON ( \n
      vf.varkey = :'disag_varkey') \n
   LEFT JOIN metDisagg as frac ON ( \n
     frac.tstime >= met.tstime \n
     AND frac.tsendtime <= met.tsendtime \n
   ) \n
   LEFT JOIN raster_templates as rt ON (rt.varkey = :'resample_varkey')  \n
   WHERE ( (met.tstime >= :start_epoch) OR (:start_epoch = -1) ) \n
   AND ( (met.tsendtime <= :end_epoch) OR (:end_epoch = -1) ) \n
 ) ,met as ( \n
   Select :'hydrocode' as hydrocode, \n
     met.featureid, to_timestamp(met.tsendtime) as obs_date, \n
     extract(year from to_timestamp(met.tsendtime)) as yr, \n
     extract(month from to_timestamp(met.tsendtime)) as mo, \n
     extract(day from to_timestamp(met.tsendtime)) as da, \n
     extract(hour from to_timestamp(met.tsendtime)) as hr, \n
     met.tstime,met.tsendtime, \n
     (ST_summarystats(met.rast, :'band', TRUE)).mean as stats \n
   FROM tempDisagg as met \n
) \n
SELECT * FROM ( \n
   SELECT hydrocode, \n
   featureid, obs_date, \n
   tstime,tsendtime, \n
   yr, mo, da, hr, \n
   0.0393701 * stats precip_in \n
   FROM met \n
   WHERE tsendtime <= (:end_epoch + :tz_offset) \n
  ) as metResults \n
 ORDER BY metResults.tsendtime \n
) to :'fname' WITH HEADER CSV;" 
# turn off the expansion of the asterisk 
set -f 
echo -e $raster_sql > $raster_sql_file  
#cat $raster_sql_file | psql -h $db_host $db_name 

