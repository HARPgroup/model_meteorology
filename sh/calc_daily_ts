hourlyvarkey=$1
dailyvarkey=$2
raster_sql_file=$3
db_host=$4
db_name=$5
end_datetime=$6

echo "called calc_daily_ts $hourlyvarkey $dailyvarkey $raster_sql_file $db_host $db_name $end_datetime"

raster_sql="
\\set hourlyvarkey '$hourlyvarkey' \n
\\set dailyvarkey '$dailyvarkey' \n
\\set end_datetime '$end_datetime' \n

with daily_data as ( \n
	select min(data.tstime) as tstime , \n
		max(data.tsendtime) as tsendtime,  \n
		data.featureid, data.entity_type,  \n
		ST_Union(data.rast, 'SUM') as rast, data.bbox, \n
		daily.hydroid as varid  \n
	from dh_timeseries_weather as data  \n
	left outer join dh_variabledefinition as daily  \n
	on(daily.varkey = :'dailyvarkey')  \n
	left outer join dh_variabledefinition as hour on( data.varid = hour.hydroid )  \n
	where daily.hydroid is not null AND hour.varkey = :'hourlyvarkey' and  \n
		( (to_timestamp(data.tsendtime) > :'end_datetime'::timestamptz - interval '1 day') )  \n
		and (to_timestamp(data.tsendtime) <= :'end_datetime'::timestamptz) \n
	GROUP BY data.featureid,data.entity_type,daily.hydroid,data.bbox \n
) \n
insert into dh_timeseries_weather (tstime,tsendtime, featureid, entity_type, rast, bbox, varid) \n
select data.* from daily_data as data \n
left outer join dh_timeseries_weather as dupe \n
on ( data.tstime = dupe.tstime and data.tsendtime = dupe.tsendtime \n
	and data.bbox = dupe.bbox and dupe.varid = data.varid) \n
where dupe.tid is null;"

# turn off the expansion of the asterisk
set -f
echo -e $raster_sql > $raster_sql_file 
#cat $raster_sql_file | psql -h $db_host $db_name
